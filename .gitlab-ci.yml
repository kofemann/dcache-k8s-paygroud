#
# test pipeline with k8s integration
#


stages:
  - prepare
  - test_deploy
  - testing
  - cleanup

variables:
  NS: build-$CI_PIPELINE_ID
  CHECK_TIMEOUT: --timeout=180s
  RANCHER_CLI_VERSION: v2.4.14


#
# prepare kubernetes env for the build
#
prepare_env:
  stage: prepare
  image:
    name: rancher/cli2
    entrypoint: ["/bin/cat"]
  script:
    - rancher login --token $RANCHER_TOKEN $RANCHER_ENDPOINT
    - rancher namespace create $NS


deploy:
  stage: test_deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  tags:
    - kubernetes
  script:
    - kubectl config set-context --current --namespace=$NS

    - kubectl apply -f deployments/postgresql-service.yml
    - sleep 10
    - kubectl wait $CHECK_TIMEOUT --for=condition=ready pod -l app=postgresql

    - kubectl apply -f deployments/zookeeper.yml
    - sleep 10
    - kubectl wait $CHECK_TIMEOUT --for=condition=ready pod -l app=zk

    - kubectl apply -f deployments/dcache-service.yml
    - sleep 10
    - kubectl wait $CHECK_TIMEOUT --for=condition=Ready pod -l app=dcache

  environment:
    testing

pynfs_tests:
  stage: testing
  allow_failure: true
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  tags:
    - kubernetes
  script:
    - kubectl config set-context --current --namespace=$NS

    - kubectl run pynfs-tester --image=dcache/pynfs:0.1 --restart=Never  --command -- sleep 3600
    - kubectl wait $CHECK_TIMEOUT --for=condition=Ready pods --all

    - kubectl exec pynfs-tester -- /bin/bash -c "cd /pynfs/nfs4.0; python3 -u ./testserver.py --xml=/xunit-report-v40.xml --maketree dcache-svc:/data all; exit 0"
    - kubectl exec pynfs-tester -- /bin/bash -c "cd /pynfs/nfs4.1; python3 -u ./testserver.py --xml=/xunit-report-v41.xml --maketree dcache-svc:/data all; exit 0"

    - kubectl cp pynfs-tester:/xunit-report-v40.xml xunit-report-v40.xml
    - kubectl cp pynfs-tester:/xunit-report-v41.xml xunit-report-v41.xml
  environment:
    testing

  artifacts:
    reports:
      junit:
        - "xunit*.xml"

#
# dispose kubernetes respurces
#
cleanup:
  stage: cleanup
  image:
    name: rancher/cli2
    entrypoint: ["/bin/cat"]
  script:
    - rancher login --token $RANCHER_TOKEN $RANCHER_ENDPOINT
    - rancher namespace delete $NS


